1.Specify a fa that is equivalent to the ndfa that finds inputs that 
  end in 01. Ending in which state signifies inputs ending in 01? 

Ans:
start;0;start;1;near
near;0;start;1;end



2. What is interesting about the results of the election using the votepref3.txt input file? 
   How could we add another voter, such that his/her preferences allow X to win on the first ballot? 

Ans:
It's interesting that although X had the most votes, because of the strategy of the balloting, 
Y ends up winning the election. The way to change the race, is to add another person who votes ['Z','X','Y'] 
so that the Z has the same number of votes of the Y the first round.





3.In the word generator program we used a dict value that was a list of words that was to contain no duplicates? 
  Why can't we just use a set (what would break in our code)? 
  If we wanted to use a set how could we modify the code to work correctly 
  (what is the smallest and/or fastest modification)?

Ans:
The first Question, is not really a question... we agree. Yes, this is the case.
The second Question...  'set' object does not support indexing. We can't use a set because we need indexing for the random method.
The third Question... to use a set, don't use the random method because the set is naturally non-ordered which is a fudge to random.
Here is our code for the smallest modification:

0def produce_text(dict1, lst, num):
1    text = [i for i in lst]
2    while len(text) <= num + len(lst) - 1:
3        r = random.randrange(len(dict1[tuple(lst)]))
4        
5        text.append(list(dict1[tuple(lst)])[r])
6        lst.append(list(dict1[tuple(lst)])[r])
7        lst.pop(0)
8    return text

for line 5 and 6:
if the dict1[tuple(lst)] is a list, we will index the list and then append them.
        text.append(dict1[tuple(lst)][r])
        lst.append(dict1[tuple(lst)][r])

but if the dict1[tuple(lst)] is a set, we will make the dict1[tuple(lst)] to be a list by list(dict1[tuple(lst)])
and here is our new code:
        text.append(list(dict1[tuple(lst)]) [r])
        lst.append(list(dict1[tuple(lst)]) [r])


Thank you!